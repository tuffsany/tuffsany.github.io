---
const { items, group, fullGroupItems } = Astro.props;

const previewItems = items.slice(0, 5); // show up to 5
const rotations = previewItems.map(() => Math.floor(Math.random() * 13) - 6);
const groupName = group;
const fullItems = fullGroupItems || items;
---

<div class="photo-stack" data-group={groupName} data-images={JSON.stringify(fullItems)}>
  {previewItems.map((item, index) => {
    const isTop = index === previewItems.length - 1;
    const fullItem = items.find(i => i.src === item.src); // ensure match
    return (
      <div
        key={item.src || index}
        class={`stacked-photo ${isTop ? 'photo' : ''}`}
        style={`--rotation: ${rotations[index]}deg; z-index: ${index};`}
        data-group={groupName}
        data-src={fullItem?.src}
      >
        <img src={item.src} alt={item.alt || 'Photo'} />
      </div>
    );
  })}
</div>


</div>

<!-- Lightbox Modal -->
<div id="lightbox-modal" class="lightbox">
  <div class="lightbox-content">
    <img id="lightbox-img" src="" alt="" />
    <p id="lightbox-caption"></p>
    <button id="prev-btn">←</button>
    <button id="next-btn">→</button>
  </div>
</div>

<style>
#list {
  margin: 2rem auto;
  max-width: 1000px; /* increased from 800px */
  padding: 1rem;
  text-align: center;
}

h2 {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  font-size: 2rem; /* slightly larger */
}

#icon {
  color: #fff;
  text-shadow: 1px 1px 2px #000;
}

.photo-stack {
  position: relative;
  width: 100%;
  max-width: 320px;
  aspect-ratio: 4 / 3;
  margin: 0 auto;
  height: 240px; /* fixed height to enforce consistency */
  overflow: visible;
}

.stacked-photo {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: 6px solid #fff;
  box-shadow: 0 8px 24px rgba(0,0,0,0.3);
  background: #fff;
  transform: rotate(var(--rotation));
  transform-origin: center center;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}



.stacked-photo.photo {
  cursor: pointer;
}

.stacked-photo.photo:hover {
  transform: rotate(0deg) scale(1.08); /* slightly larger on hover */
  box-shadow: 0 14px 36px rgba(0,0,0,0.45);
  z-index: 10;
}

.stacked-photo img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
}

/* Lightbox styles */
.lightbox {
  display: none;
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.9);
  justify-content: center;
  align-items: center;
  z-index: 2000;
}

.lightbox.active {
  display: flex;
}

.lightbox-content {
  position: relative;
  max-width: 90%;
  max-height: 90%;
  text-align: center;
}

#lightbox-img {
  max-width: 100%;
  max-height: 80vh;
  border-radius: 6px;
  box-shadow: 0 0 25px rgba(0,0,0,0.6);
}

#lightbox-caption {
  margin-top: 1rem;
  font-size: 1rem;
  color: #ddd;
}

#prev-btn, #next-btn {
  position: fixed; /* changed from absolute */
  top: 50%;
  transform: translateY(-50%);
  background: rgba(0,0,0,0.6);
  color: #fff;
  border: none;
  font-size: 2.5rem;
  padding: 0.5rem 1rem;
  cursor: pointer;
  border-radius: 6px;
  transition: background 0.2s ease;
  z-index: 2100; /* above lightbox */
}

#prev-btn:hover, #next-btn:hover {
  background: rgba(255,255,255,0.2);
}

#prev-btn {
  left: 10px; 
}

#next-btn {
  right: 10px; 
}


</style>

<script>
let initialized = false;

export default function lightbox() {
  if (initialized) return;
  initialized = true;

  const lightbox = document.getElementById('lightbox-modal');
  const lightboxImg = document.getElementById('lightbox-img');
  const lightboxCaption = document.getElementById('lightbox-caption');
  const nextBtn = document.getElementById('next-btn');
  const prevBtn = document.getElementById('prev-btn');

  let currentGroup = [];
  let currentIndex = 0;

  // Load all image groups
  document.querySelectorAll('.photo-stack').forEach(stack => {
    const groupName = stack.dataset.group;
    try {
      const images = JSON.parse(stack.dataset.images || '[]');
      window.imageGroups = window.imageGroups || {};
      window.imageGroups[groupName] = images;
    } catch (err) {
      console.error(`Failed to parse images for group "${groupName}"`, err);
    }
  });

  document.querySelectorAll('.stacked-photo.photo').forEach(photo => {
    photo.addEventListener('click', (e) => {
      e.preventDefault();
      const groupName = photo.dataset.group;
      const clickedSrc = photo.dataset.src;
      currentGroup = window.imageGroups[groupName] || [];
      currentIndex = currentGroup.findIndex(item => item.src === clickedSrc);
      if (currentIndex === -1) currentIndex = 0;
      if (!currentGroup.length) return;
      showImage();
      lightbox.classList.add('active');
    });
  });

  function showImage() {
    const item = currentGroup[currentIndex];
    if (!item) return;
    lightboxImg.src = item.src;
    lightboxCaption.textContent = item.alt || "Untitled";

    const showNav = currentGroup.length > 1;
    prevBtn.style.display = showNav ? 'block' : 'none';
    nextBtn.style.display = showNav ? 'block' : 'none';
  }

  nextBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    currentIndex = (currentIndex + 1) % currentGroup.length;
    showImage();
  });

  prevBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    currentIndex = (currentIndex - 1 + currentGroup.length) % currentGroup.length;
    showImage();
  });

  lightbox.addEventListener('click', (e) => {
    if (!e.target.closest('.lightbox-content')) {
      lightbox.classList.remove('active');
      lightboxImg.src = '';
    }
  });

  document.addEventListener('keydown', (e) => {
    if (!lightbox.classList.contains('active')) return;
    if (e.key === 'ArrowRight') nextBtn.click();
    if (e.key === 'ArrowLeft') prevBtn.click();
    if (e.key === 'Escape') {
      lightbox.classList.remove('active');
      lightboxImg.src = '';
    }
  });
}

window.addEventListener('DOMContentLoaded', () => {
  lightbox();
});
</script>
